runtime! pluginrc.vim

syntax on
" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark
" fold settings
set foldenable              " 开始折叠
set foldmethod=syntax       " 设置语法折叠
"set foldmethod=marker
set foldcolumn=0            " 设置折叠区域的宽度
setlocal foldlevel=1        " 设置折叠层数为
set foldlevelstart=99       " 打开文件是默认不折叠代码
"set foldclose=all          " 设置为自动关闭折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>      "用空格键来开关折叠

" show tab/whitespace
set listchars=tab:>-,space:𐤟,trail:܍,eol:$
map <F10> :set list!<cr>
" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") |
				\	exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

set fo-=r		" 关闭粘贴代码时自动注释

set hlsearch " turns on search highlighting
set tags=./tags;/
set t_Co=256
set laststatus=2 " For powerline always show
set wildmenu
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set smarttab

" auto expandtab to space
if has("autocmd")
	"autocmd BufRead,BufNewFile *.c, *.h set expandtab
	autocmd FileType c,cpp,h setlocal ts=4 sts=4 sw=4 expandtab
endif

" termguicolors not working
" if (has("termguicolors"))
"         set termguicolors
" endif

if !&scrolloff
	set scrolloff=1
endif
if !&sidescrolloff
	set sidescrolloff=5
endif
set display+=lastline

set fencs=ucs-bom,utf-8,default,latin1,gb18030,cp936,big5

" Use system clipboard
if !has("gui_running")
	vnoremap <S-Del> "+x
	vnoremap <C-Insert> "+y
	map <S-Insert>		"+gP
	cmap <S-Insert>		<C-R>+
endif

let mapleader = ","

" Easier to switch window
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

" Easier to switch tab
noremap tp :tabp<CR>
noremap tn :tabn<CR>
noremap tl :tabs<CR>
noremap tc :tabc<CR>

" Open file explorer
" map ge :Texplore<CR>

" Open buffer explorer
map gl :BufExplorer<CR>
" Easier to switch buffer
set switchbuf=usetab,newtab
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>
nnoremap <C-TAB> :sbnext<CR>
nnoremap <C-S-TAB> :sbprevious<CR>


" Man
runtime ftplugin/man.vim
nnoremap K :Man <cword><cr>

" Some people like the visual feedback shown in the status line
" by the following alternative for your vimrc
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Toggle line number
nmap <C-N><C-N> :setlocal invnumber<CR>

" Toggle background
map <Leader>b :let &background = ( &background == "dark"? "light" : "dark" )<CR>

nnoremap <X1Mouse> <C-O>
nnoremap <X2Mouse> <C-I>

if has("autocmd")
	autocmd BufEnter,BufWrite,FileType c,cpp,python,sh,java,javascript,perl,ruby,php,make,vim
				\ setlocal number | setlocal cursorline
	autocmd VimEnter,FileType * call PluginSetup()
	"autocmd BufEnter,FileType c,cpp,python,sh,java,javascript,perl,ruby,php,vim nested TagbarOpen
	autocmd BufReadPost * DetectIndent
	autocmd FilterWritePre * nested if &diff | TagbarClose
endif

function! PluginSetup()
	if exists(":TagbarToggle")
		let g:Tagbar_title = "[Tagbar]"
		let g:tagbar_width = 36
		let g:tagbar_zoomwidth = 0
		nnoremap <silent> <F7> :TagbarToggle<CR>
	endif
	if exists(":NERDTreeToggle")
		let g:NERDTreeWinSize=36 "设置 NERDTree 子窗口宽度
		let g:NERDTreeWinPos="left" "设置 NERDTree 子窗口位置
		let g:NERDTreeShowBookmarks = 1
		let g:NERDTreeQuitOnOpen = 1
		let g:NERDTreeMouseMode = 2
		nnoremap <silent> <F6> :NERDTreeToggle<CR>
	endif
	if exists(":Grepper")
		" When search with git, search from top level of the repository
		"let g:grepper.git =
		"\ { 'grepprg': 'git grep -nI $* -- `git rev-parse --show-toplevel`' }
		nmap gs <plug>(GrepperOperator)
		xmap gs <plug>(GrepperOperator)
		nnoremap <leader>gg :Grepper -tool git<cr>
		nnoremap <leader>ga :Grepper -tool ag<cr>
		nnoremap <leader>gs :Grepper -tool ag -side<cr>
		nnoremap <leader>*  :Grepper -tool ag -cword -noprompt<cr>
	endif
	if exists(":cscope")
		set csprg=/usr/bin/cscope
		set csto=1		"0 cscope first, 1 ctags first
		set cst
		set nocsverb
		" add any database in current directory
		if filereadable("cscope.out")
			cs add cscope.out
		" else add database pointed to by environment
		elseif $CSCOPE_DB != ""
			cs add $CSCOPE_DB
		endif
		set csverb
		nmap <leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
		nmap <leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
		nmap <leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
		nmap <leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
		nmap <leader>e :cs find e <C-R>=expand("<cword>")<CR><CR>
		nmap <leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
		nmap <leader>o :cs find i <C-R>=expand("<cfile>")<CR><CR>
		nmap <leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>
	endif

	if exists(":IndentGuidesToggle")
		"let g:indent_guides_enable_on_vim_startup=1 " 随 vim 自启动
		let g:indent_guides_start_level=2 "从第二层开始可视化显示缩进
		let g:indent_guides_guide_size=1 " 色块宽度
		" 快捷键 i 开/关缩进可视化
		nmap <silent> <Leader>i <Plug>IndentGuidesToggle
	endif
endfunction


" air-line
let g:airline_powerline_fonts = 1
"let g:Powerline_symbols = 'fancy'
let g:airline#extensions#tabline#enabled = 1

"set statusline=%{fugitive#statusline()} " fugitive status
command! Gtdiff tabedit %|Gvdiff " git diff in tab

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" auto cd
let g:rooter_change_directory_for_non_project_files = 'current'
let g:rooter_use_lcd = 1
let g:rooter_silent_chdir = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_c = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

let g:ctrlp_cmd = 'CtrlPMRU' " MRU file list as ctrlp default

let g:python_highlight_all = 1 " python-syntax

"let g:ycm_confirm_extra_conf = 0

" grepper
let g:grepper           = {}
let g:grepper.tools     = ['git', 'ag', 'grep']
" let g:grepper.open      = 1
" let g:grepper.jump      = 1
let g:grepper.next_tool = '<leader>g'
let g:grepper.highlight = 1

let g:detectindent_preferred_indent = 4 " specify a preferred indent level when no detection is possible

let g:onedark_terminal_italics = 1
if !has("gui_running")
	try
		colorscheme vividchalk
	catch /^Vim\%((\a\+)\)\=:E185/
		" Fallback to desert
		colorscheme desert
	endtry
endif

vmap <leader>v "+gp  "粘贴并使光标移动到内容之后
vmap <leader>c "+y   "复制到系统剪贴板

map <leader><space> :FixWhitespace<cr>

source $HOME/.vimrc.local


