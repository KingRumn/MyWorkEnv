#自动启动nvm, 需要正确安装nvm
#
# export NVM_DIR="$HOME/.nvm" && (
#   git clone https://github.com/creationix/nvm.git "$NVM_DIR"
#   cd "$NVM_DIR"
#   git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`
# ) && . "$NVM_DIR/nvm.sh"
#
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh"  ] && . "$NVM_DIR/nvm.sh"

# advcpmv should be installed properly
# wget http://ftp.gnu.org/gnu/coreutils/coreutils-8.21.tar.xz
# tar xvJf coreutils-8.21.tar.xz
# cd coreutils-8.21/
# wget https://raw.githubusercontent.com/schollz/advcpmv/master/advcpmv-0.5-8.21.patch
# patch -p1 -i advcpmv-0.5-8.21.patch
# ./configure
# make
# sudo mv ./src/cp /usr/local/bin/cpg
# sudo mv ./src/mv /usr/local/bin/mvg
command -v cpg >/dev/null 2>&1 && {
		alias cp='cpg -g'
		alias mv='mvg -g'
	}

# 修改PATH路径,增加home/bin
export PATH="$PATH:$HOME/bin"

# 必须已经安装了perlbrew
# curl -L https://install.perlbrew.pl -o install.perlbrew.pl
# cat install.perlbrew.pl | bash
PERL_BASH=~/perl5/perlbrew/etc/bashrc
[ -s "$PERL_BASH"  ] && source "$PERL_BASH"

# 需要正确安装tmux
#tmux
_tmux_init()
{
	tmux new-session -s "work"	 #开启一个会话
	#tmux new-window -n "proj"		#开启一个窗口
	#tmux split-window -h			#开启一个竖屏
	#tmux split-window -v 			#开启一个横屏，并执行top命令
	#tmux -2 attach-session -d		#tmux -2强制启用256color，连接已开启的tmux
}

#判断是否已有开启的tmux会话，没有则开启
tmux_init()
{
	if which tmux 2>&1 >/dev/null; then
		test -z "$TMUX" && (tmux attach || _tmux_init)
	fi
}

# cp file to tftpfiles
# 必须保证文件夹存在,如果使有意义的花,需要正确安装tftp
#
# sudo apt-get install xinetd tftpd tftp
# sudo vi /etc/xinetd.d/tftp
# {
#	protocol        = udp
#	port            = 69
#	socket_type     = dgram
#	wait            = yes
#	user            = nobody
#	server          = /usr/sbin/in.tftpd
#	server_args     = /tftpboot
#	disable         = no
#
# }
# service tftp
# sudo mkdir /tftpboot
# sudo chmod -R 777 /tftpboot
# sudo chown -R nobody /tftpboot
# sudo /etc/init.d/xinetd start
# Test
# tftp 192.168.1.2
# tftp> get hello.txt
export TFTP_FILE_DIR=~/common/tftpfiles
__tftp_cp()
{
	file_name=$1
	cp ${file_name} ${TFTP_FILE_DIR}/
}
alias tftpcp='__tftp_cp'


# nodejs配置
# ubuntu 16上安装nodejs可通过解压并增加环境变量的方法；
# wget https://nodejs.org/dist/v10.16.1/node-v10.16.1-linux-x64.tar.xz
# tar -xvf node-v10.16.1-linux-x64
# mv node-v10.16.1-linux-x64 ~/common/lib/nodejs/.
# 导出环境变量

VERSION=v12.16.2
DISTRO=linux-x64
export PATH="$PATH:$HOME/common/lib/nodejs/node-$VERSION-$DISTRO/bin"

# fzf
# 安装fzf：git clone --depth 1 https://github.com/junegunn/fzf.git; ./fzf/install;
# 会在bashrc中增加如下语句，可以删掉放在这里
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# 利用fzf进入子文件夹，适用于文件数不太多的时候
function __cd_subdir()
{
	local maxd=4
	local dir="."
	if [ -z "$1" ]; then
		until [ -z "${dir}" ]; do
			dir=$(find . -maxdepth ${maxd} -type d | fzf)
			if [ -n "$dir" ]; then
				cd ${dir}
			else
				return
			fi
		done
	fi
	until [ -z "$1" ]; do
		dir=$(find . -maxdepth ${maxd} -type d -iname "*$1*" | fzf)
		if [ -n "${dir}" ]; then
			cd ${dir}
		else
			break
		fi
		shift
	done
}

alias ks='__cd_subdir'

function __cd_predir()
{
	local cur=$(pwd)
	cd -
	local pre=$(pwd)
	cd -
	local dir="."
	until [  $(pwd) == $(echo ~) ]; do
		pwd
		cd ..
	done
	cd ${pre}
	cd ${cur}
}

function __cd_predir_fzf()
{
	cd  $(__cd_predir | fzf)
}

alias kp="__cd_predir_fzf"

function __cd_git_root()
{
	local found=false
	local cur=$(pwd)
	while true; do {
		if [ $(pwd) == $(echo ~) ] ; then
			cd ${cur}
			break
		fi
		found=$(find . -maxdepth 1 -type d  | grep -E "/\.git$" && true || false)
		if [ $found ] ; then
			cd ${cur} # 保证cd -还能继续生效
			cd -
			break
		else
			cd ..
		fi
	} done;
}

alias kg="__cd_git_root"

# python virtualenv/virtualwrapper
export WORKON_HOME=$HOME/common/python/virtualenv


# java

export JAVA_HOME=/usr/lib/java/jre1.8.0_261 ## 这里要注意目录要换成自己解压的jdk 目录
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
